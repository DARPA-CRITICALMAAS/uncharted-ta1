from PIL import Image
import numpy as np
from tqdm import tqdm
from typing import List

from detection.entities import MapTile, MapImage, Task, MapPointLabel


class Tiler(Task):
    # TODO: handle case where image already has labels attached to it.

    @staticmethod
    def process(
        image: MapImage, tile_size: List[int] = [1024, 1024], overlap: float = 0.00
    ) -> List[MapTile]:
        image_array = np.array(image.image)
        original_height, original_width, _ = image_array.shape

        step_x = int(tile_size[0] * (1 - overlap))
        step_y = int(tile_size[1] * (1 - overlap))

        tiles = []

        for y in range(0, original_height, step_y):
            for x in range(0, original_width, step_x):
                width = min(tile_size[0], original_width - x)
                height = min(tile_size[1], original_height - y)

                tile_array = image_array[y : y + height, x : x + width]

                if (
                    tile_array.shape[0] < tile_size[1]
                    or tile_array.shape[1] < tile_size[0]
                ):
                    padded_tile = np.zeros(
                        (tile_size[1], tile_size[0], 3), dtype=tile_array.dtype
                    )

                    padded_tile[:height, :width] = tile_array
                    tile_array = padded_tile

                maptile = MapTile(
                    x_offset=x,
                    y_offset=y,
                    width=tile_size[0],
                    height=tile_size[1],
                    image=Image.fromarray(tile_array),
                    map_path=image.path,
                )
                tiles.append(maptile)

        return tiles

    @property
    def input_type(self):
        return MapImage

    @property
    def output_type(self):
        return List[MapTile]


class Untiler(Task):

    """
    Used to reconstruct the original image from the tiles and map back the bounding boxes and labels.
    Note that new images aren't actually constructed here, we are just mapping predictions from tiles onto the original map.
    """

    @staticmethod
    def process(tiles: List[MapTile]) -> MapImage:
        """
        Reconstructs the original image from the tiles and maps back the bounding boxes and labels.
        tile_predictions: List of MapPointLabel objects. Generated by the model. TILES MUST BE FROM ONLY ONE MAP.
        returns: List of MapPointLabel objects. These can be mapped directly onto the original map.
        """

        assert all(
            i.predictions is not None for i in tiles
        ), "Tiles must have predictions attached to them."
        all_predictions = []
        map_path = tiles[0].map_path
        for tile in tiles:
            for pred in tqdm(
                tile.predictions,
                desc="Reconstructing original map with predictions on tiles",
            ):
                x_offset = tile.x_offset  # xmin of tile, absolute value in original map
                y_offset = tile.y_offset  # ymin of tile, absolute value in original map

                x1 = pred.x1
                x2 = pred.x2
                y1 = pred.y1
                y2 = pred.y2
                score = pred.score
                label_name = pred.class_name

                global_prediction = MapPointLabel(
                    classifier_name=pred.classifier_name,
                    classifier_version=pred.classifier_version,
                    class_id=pred.class_id,
                    class_name=label_name,
                    x1=x1
                    + x_offset,  # Add offset of tile to project onto original map.
                    y1=y1 + y_offset,
                    x2=x2 + x_offset,
                    y2=y2 + y_offset,
                    score=score,
                    directionality=pred.directionality,
                )

                all_predictions.append(global_prediction)

        return MapImage.load(map_path, labels=all_predictions)

    @property
    def input_type(self):
        return List[MapTile]

    @property
    def output_type(self):
        return MapImage
